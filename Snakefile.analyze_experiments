# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

include: "Snakefile.definitions"

#################################################################################
# Initial Python code for setup
#################################################################################
import os,sys,inspect
currentdir = os.path.dirname(
    os.path.abspath(inspect.getfile(inspect.currentframe()))
        )
sys.path.insert(0, os.path.join(currentdir, "src/solve"))
sys.path.insert(0, os.path.join(currentdir, "src/visualization"))
sys.path.insert(0, os.path.join(currentdir, "src/data"))

interim_folder = "/tmp/interim"

USE_PAPER_DATASET=True
PHASES=["phaseI", "phaseII_PP", "phaseII_R", "phaseII"]

# Perfect prediction case
# Synthetic cases
all_inputs_with_bins = expand("%s/{phase}/case_{case}_level_{level}_bins_{bins}.pickle" %
                              interim_folder, phase=PHASES[0:2], case=CASES, level=LEVELS, bins=BINS)
all_inputs_nobins = expand("%s/{phase}/case_{case}_level_{level}_nobins.pickle" %
                            interim_folder, phase=PHASES[0], case=CASES, level=LEVELS)
# Wikipedia cases
wiki_all_inputs_with_bins = expand("%s/{phase}/case_wikipedia_2014_bins_{bins}.pickle" % 
                             interim_folder, phase=PHASES[0:2], bins=BINS)
wiki_all_inputs_nobins = expand("%s/{phase}/case_wikipedia_2014_nobins.pickle" %
                                interim_folder, phase=PHASES[0])

# Imperfect prediction case (realization)
realization = expand("%s/{phase}/case_{case}_level_{level}_bins_{bins}.pickle" % 
                     interim_folder, phase=PHASES[2], case=CASES, level=LEVELS, bins=BINS_REALIZATION)
oracle = expand("%s/{phase}/case_{case}_level_{level}_oracle.pickle" %
                interim_folder, phase=PHASES[3], case=CASES, level=LEVELS)

all_inputs = all_inputs_with_bins + all_inputs_nobins + realization + oracle
all_inputs += wiki_all_inputs_with_bins + wiki_all_inputs_nobins

# Pickles summarizing each experiment
summaries = expand("%s/{phase}/case_{case}_level_{level}_summary.pickle" %
                  interim_folder, phase=PHASES, case=CASES, level=LEVELS)
wiki_summaries = expand("%s/{phase}/case_wikipedia_{year}_summary.pickle" % 
                   interim_folder, phase=PHASES[:2], year=[2014])
wiki_summaries += expand("%s/{phase}/case_wikipedia_{year}_summary.pickle" % 
                    interim_folder, phase=PHASES[2:]+["phaseII_OD"], year=[2013, 2014])



experiments_results_pickle = "data/processed/all_experiments_results.pickle"
wiki_results_pickle = "data/processed/all_wikipedia_results.pickle"
wiki_multi_results_pickles = expand("data/processed/case_wikipedia_2014_multi_{which}_bins_40.pickle",
                                     which=["Amazon", "Azure", "Both"])


#################################################################################
# MAIN RULE
#################################################################################
rule prepare_all_results:
    input: experiments_results_pickle, wiki_results_pickle, wiki_multi_results_pickles

# rule abridge_solutions:
#     input: phase_I_abridged_solutions

def files_composing_experiment_solution(w):
    if w.phase in PHASES[0:2]:
        bins = BINS
    elif w.phase == PHASES[2]:
        bins = BINS_REALIZATION
    else:
        bins=None

    # This list is valid for phaseI, phaseII_PP and phaseII_R
    files = expand("%s/%s/case_%s_level_%s_bins_{bins}.pickle" %
                  (interim_folder, w.phase, w.case, w.level),
                  bins=bins)

    if w.phase==PHASES[0]:
        # For phaseI add also the nobins case
        files.append("%s/%s/case_%s_level_%s_nobins.pickle" % 
                     (interim_folder, w.phase, w.case, w.level))
    elif w.phase==PHASES[1]:
        pass
    elif w.phase==PHASES[2]:
        pass
    elif w.phase==PHASES[3]:
        # For phaseII_O replace the file list for this one
        files = expand("%s/%s/case_%s_level_%s_oracle.pickle" % 
                       (interim_folder, w.phase, w.case, w.level))
    else:
        raise Exception("Unknown phase for synthetic experiments: %s" % w.phase)
    return files

def files_composing_wikipedia_solution(w):
    if w.phase == PHASES[0] or w.phase == PHASES[1]:
        bins = BINS
    elif w.phase == PHASES[2] or w.phase == "phaseII_OD":
        bins = [40]
    else:
        bins = None

    files = expand("%s/%s/case_wikipedia_%s_bins_{bins}.pickle" %
                   (interim_folder, w.phase, w.year), bins=bins)

    if w.phase == PHASES[0]:
        files.append("%s/%s/case_wikipedia_%s_nobins.pickle" %
                     (interim_folder, w.phase, w.year))
    elif w.phase==PHASES[1] or w.phase==PHASES[2] or w.phase=="phaseII_OD":
        pass
    elif w.phase==PHASES[3]:
        files = expand("%s/%s/case_wikipedia_%s_oracle.pickle" %
                      (interim_folder, w.phase, w.year))
    else:
        raise Exception("Unknown phase for wikipedia binning experiment: %s" % w.phase)
    return files

rule summarize_experiment:
    input: files_composing_experiment_solution
    output: "%s/{phase}/case_{case}_level_{level}_summary.pickle" % interim_folder
    message: "Summarizing solutions for {wildcards.phase} of experiments '{wildcards.case}-{wildcards.level}'"
    run:
        import experiments
        experiments.summarize_experiment(input, output[0])

rule summarize_wikipedia:
    input: files_composing_wikipedia_solution
    output: "%s/{phase}/case_wikipedia_{year}_summary.pickle" % interim_folder
    message: "Summarizing solutions for {wildcards.phase} of binning experiments for wikipedia {wildcards.year}"
    run:
        import experiments
        experiments.summarize_experiment(input, output[0])

rule join_summaries:
    input: summaries
    output: experiments_results_pickle
    message: "Joining all experiment results in a single dataframe: {output}"
    run:
        import experiments
        experiments.collect_all_results(input, 
             dict(phaseI="I", phaseII_PP="II", phaseII_R="R", phaseII="O"),
             output[0])

rule join_wikipedia:
    input: wiki_summaries
    output: wiki_results_pickle
    message: "Joining all wikipedia results in a single dataframe: {output}"
    run:
        import experiments
        experiments.collect_all_results(input, 
             dict(phaseI="I", phaseII_PP="II", phaseII_R="Naive", phaseII="Oracle", phaseII_OD="No predictor"),
             output[0])


rule copy_wikipedia_multicloud_solutions:
    input: "%s/phaseII_PP/case_wikipedia_2014_multi_{which}_bins_40.pickle" % interim_folder
    output: "data/processed/case_wikipedia_2014_multi_{which}_bins_40.pickle"
    message: "Copying results of wikipedia multicloud experiment, provider {wildcards.which}"
    shell: "cp {input} {output}"

