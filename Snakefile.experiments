# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

USE_PAPER_DATASET = True

include: "Snakefile.definitions"
import os,sys,inspect
currentdir = os.path.dirname(
    os.path.abspath(inspect.getfile(inspect.currentframe()))
        )
sys.path.insert(0, os.path.join(currentdir, "src/solve"))
sys.path.insert(0, os.path.join(currentdir, "src/visualization"))
sys.path.insert(0, os.path.join(currentdir, "src/data"))

include: "Snakefile.rules"
include: "Snakefile.analyze_experiments"

interim_folder = "data/interim"

# PHASE I DESIRED RESULTS
# One file per scenario, level and each max_bins value
phase_I = expand("%s/phaseI/case_{case}_level_{level}_bins_{bins}.pickle" % 
                 interim_folder, case=CASES, level=LEVELS, bins=BINS)

# Append also one file per scenario, level and the case max_bins=None
phase_I.extend(expand("%s/phaseI/case_{case}_level_{level}_nobins.pickle" %
                      interim_folder, case=CASES, level=LEVELS))

# PHASE II DESIRED RESULTS
# For the Perfect Prediction, one solution per scenario, level and max_bins
phase_II_PP = expand("%s/phaseII_PP/case_{case}_level_{level}_bins_{bins}.pickle" % 
                     interim_folder, case=CASES, level=LEVELS, bins=BINS)

# For the non perfect prediction, one solution per scenario, level and max_bins
phase_II_realization = expand("%s/phaseII_R/case_{case}_level_{level}_bins_{bins}.pickle" %
                              interim_folder, case=CASES, level=LEVELS, bins=[20])
# NOTE: Only for max_bins=20 to reproduce the results in the paper.
# Replace with bins=BINS to get results for all max_bins values

# For the oracle, one solution per scenario and level (it uses max_bins=None)
phase_II_oracle = expand("%s/phaseII/case_{case}_level_{level}_oracle.pickle" %
                        interim_folder, case=CASES, level=LEVELS)

# Cloud infrastructure
instances_for_synthetic_experiments = "%s/instances_for_synthetic_experiments.pickle" % interim_folder


rule all:
    input: phase_I, phase_II_PP, phase_II_realization, phase_II_oracle

rule run_phase_I:
    input: phase_I

rule run_phase_II_PP:
    input: phase_II_PP

rule run_phase_II_realization:
    input: phase_II_realization

rule run_phase_II_oracle:
    input: phase_II_oracle

rule create_instances_for_synthetic_experiments:
    input:  "data/processed/benchmarks_wikibench.csv", "data/processed/providers_amazon_data.csv"
    output: instances_for_synthetic_experiments
    message: "Creating instances for synthetic experiments"
    run:
        import create_infrastructure_for_experiments as experiments
        experiments.create_instances(input[0], input[1], output[0])

# rule kk:
#     input: instances_for_synthetic_experiments
#     output: phase_I_binning_experiments
#     message: "Fake rule. Not yet implemented"
    
rule solve_case_Phase_I_with_bins:
    input: instances_for_synthetic_experiments, "data/processed/traces_synthetic_{case}_LTWP.csv"
    output: "%s/phaseI/case_{case}_level_{level}_bins_{bins}.pickle" % interim_folder  
    message: "Solving Phase I for '{wildcards.case}-{wildcards.level}', with {wildcards.bins} bins"
    run:
       import experiments
       experiments.perform_experiment_phase_I(
            infrastructure_file=input[0], workload_file=input[1],
            level=int(wildcards.level),
            max_bins=int(wildcards.bins),
            output_file=output[0]
            )

rule solve_case_Phase_I_without_bins:
    input: instances_for_synthetic_experiments, "data/processed/traces_synthetic_{case}_LTWP.csv"
    output: "%s/phaseI/case_{case}_level_{level}_nobins.pickle" % interim_folder  
    message: "Solving Phase I for '{wildcards.case}-{wildcards.level}', without binning"
    run:
       import experiments
       experiments.perform_experiment_phase_I(
            infrastructure_file=input[0], workload_file=input[1],
            level=int(wildcards.level),
            max_bins=None,
            output_file=output[0],
            frac_gap=None,
            max_seconds=60*60
            )
    
rule solve_case_phase_II_PP:
    # The "Perfect Prediction" case assumes that Phase I had the exact workload
    # So we use the same LTWP used in Phase I, for Phase II
    input: instances_for_synthetic_experiments, "data/processed/traces_synthetic_{case}_LTWP.csv",
           "%s/phaseI/case_{case}_level_{level}_bins_{bins}.pickle" % interim_folder
    output: "%s/phaseII_PP/case_{case}_level_{level}_bins_{bins}.pickle" % interim_folder
    message: "Solving Phase II, perfect prediction, for '{wildcards.case}-{wildcards.level}, {wildcards.bins} bins'"
    run:
        import experiments
        experiments.perform_experiment_phase_II(
            infrastructure_file=input[0], 
            workload_file=input[1], 
            level=int(wildcards.level),
            phase_I_solution=input[2],
            output_file=output[0],
            )

rule solve_case_phase_II_realization:
    # The imperfect prediction uses a STWP different from LTWP
    input: instances_for_synthetic_experiments, "data/processed/traces_synthetic_{case}_STWP.csv",
           "%s/phaseI/case_{case}_level_{level}_bins_{bins}.pickle" % interim_folder
    output: "%s/phaseII_R/case_{case}_level_{level}_bins_{bins}.pickle" % interim_folder
    message: "Solving Phase II, imperfect prediction, for '{wildcards.case}-{wildcards.level}'"
    run:
        import experiments
        experiments.perform_experiment_phase_II(
            infrastructure_file=input[0], 
            workload_file=input[1], 
            level=int(wildcards.level),
            phase_I_solution=input[2],
            output_file=output[0],
            )

rule solve_case_phase_II_oracle:
    # Oracle knowns the future STWP, so we build a problem which uses it as prediction
    # and solve Phase I for it
    input: instances_for_synthetic_experiments, "data/processed/traces_synthetic_{case}_STWP.csv"
    output: "%s/phaseII/case_{case}_level_{level}_oracle.pickle" % interim_folder  
    message: "Solving Phase II, realization oracle, for '{wildcards.case}-{wildcards.level}'"
    run:
       import experiments
       experiments.perform_experiment_phase_I(
            infrastructure_file=input[0], workload_file=input[1],
            level=int(wildcards.level),
            max_bins=None,
            output_file=output[0],
            frac_gap=None,
            max_seconds=60*60
            )
